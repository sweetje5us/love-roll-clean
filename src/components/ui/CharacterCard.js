import React from 'react';
import { motion } from 'framer-motion';
import CharacterPreview from './CharacterPreview';
import { useInventory } from '../../contexts/InventoryContext';
import { useCharacters } from '../../contexts/CharacterContext';
import itemsData from '../../data/items.json';
import './CharacterCard.css';

const CharacterCard = ({ character, onDelete, onEdit, hideActions = false }) => {
  const { inventory } = useInventory();
  const { getLevelInfo } = useCharacters();
  
  const handleDelete = (e) => {
    e.stopPropagation();
    if (onDelete) {
      onDelete(character.id);
    }
  };

  const handleEdit = (e) => {
    e.stopPropagation();
    if (onEdit) {
      onEdit(character);
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ
  const levelInfo = getLevelInfo(character);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ–ª–∞
  const getGenderIcon = (gender) => {
    return gender === 'female' ? 'venus' : 'mars';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª–∞
  const getGenderText = (gender) => {
    return gender === 'female' ? '–ñ–µ–Ω—Å–∫–∏–π' : '–ú—É–∂—Å–∫–æ–π';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
  const getAgeText = (age) => {
    return age === '1' ? '–ú–æ–ª–æ–¥–æ–π' : '–í–∑—Ä–æ—Å–ª—ã–π';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–∞
  const getPetData = (petId) => {
    if (!petId) return null;
    return itemsData.items.pet[petId] || null;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞
  const getPetDisplayName = (character) => {
    const petData = getPetData(character.petId);
    if (!petData) return '–ë–µ–∑ –ø–∏—Ç–æ–º—Ü–∞';
    
    const petName = character.petName && character.petName.trim() ? character.petName : '';
    return petName ? `${petData.name} ${petName}` : petData.name;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–π—Ç–∞ –ø–∏—Ç–æ–º—Ü–∞
  const getPetSprite = (petId) => {
    const petData = getPetData(petId);
    return petData ? petData.sprite : null;
  };

  return (
    <motion.div 
      className="character-card"
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.9 }}
      whileHover={{ scale: 1.02 }}
      transition={{ duration: 0.2 }}
      onClick={hideActions ? undefined : handleEdit}
    >
      <div className="character-avatar">
        <CharacterPreview characterData={character} inventory={inventory} />
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è */}
        <div className="character-level">
          <div className="level-badge">
            <span className="level-number">{levelInfo.level}</span>
            <span className="level-label">—É—Ä.</span>
          </div>
          
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ–ø—ã—Ç–∞ */}
          {!levelInfo.isMaxLevel && (
            <div className="experience-bar">
              <div 
                className="experience-fill"
                style={{ width: `${levelInfo.progress}%` }}
              ></div>
            </div>
          )}
        </div>
      </div>
      
      <div className="character-info">
        <h3 className="character-name">{character.name}</h3>
        <div className="character-details">
          <span className="character-gender">
            <i className={`fas fa-${getGenderIcon(character.gender)}`}></i>
            {getGenderText(character.gender)}
          </span>
          <span className="character-age">
            <i className="fas fa-birthday-cake"></i>
            {getAgeText(character.age)}
          </span>
        </div>
        
        <div className="character-stats-summary">
          <div className="stat-item">
            <span className="stat-icon">üìä</span>
            <span className="stat-value">
              {character.availableStatPoints ? `${character.availableStatPoints} –Ω–µ—Ä–∞—Å–ø—Ä.` : '10/10'}
            </span>
          </div>
          <div className="stat-item">
            {getPetSprite(character.petId) ? (
              <img 
                src={getPetSprite(character.petId)} 
                alt="–ü–∏—Ç–æ–º–µ—Ü"
                className="pet-sprite"
              />
            ) : (
              <span className="stat-icon">üêæ</span>
            )}
            <span className="stat-value">{getPetDisplayName(character)}</span>
          </div>
        </div>

        {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
        {character.stats && (
          <div className="character-detailed-stats">
            <div className="stat-row">
              <span className="stat-label">–•–∞—Ä:</span>
              <span className="stat-value">{character.stats.charisma || 0}</span>
            </div>
            <div className="stat-row">
              <span className="stat-label">–•–æ–ª:</span>
              <span className="stat-value">{character.stats.coldness || 0}</span>
            </div>
            <div className="stat-row">
              <span className="stat-label">–ß—É–≤:</span>
              <span className="stat-value">{character.stats.sensitivity || 0}</span>
            </div>
            <div className="stat-row">
              <span className="stat-label">–ö–æ–≤:</span>
              <span className="stat-value">{character.stats.cunning || 0}</span>
            </div>
            <div className="stat-row">
              <span className="stat-label">–†–µ—à:</span>
              <span className="stat-value">{character.stats.determination || 0}</span>
            </div>
            <div className="stat-row">
              <span className="stat-label">–ò–Ω—Ç:</span>
              <span className="stat-value">{character.stats.intelligence || 0}</span>
            </div>
          </div>
        )}
      </div>
      
      {!hideActions && (
        <div className="character-actions">
          <button 
            className="action-btn edit-btn"
            onClick={handleEdit}
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          >
            <i className="fas fa-edit"></i>
          </button>
          <button 
            className="action-btn delete-btn"
            onClick={handleDelete}
            title="–£–¥–∞–ª–∏—Ç—å"
          >
            <i className="fas fa-trash"></i>
          </button>
        </div>
      )}
    </motion.div>
  );
};

export default CharacterCard; 