import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useCurrency } from '../../contexts/CurrencyContext';
import { useInventory } from '../../contexts/InventoryContext';
import { useDailyRewards } from '../../contexts/DailyRewardsContext';
import { 
  getShopItems, 
  getAllTypes, 
  getRotationInfo, 
  getCurrentDiscounts, 
  getItemsByType, 
  getTypeInfo,
  getItemById,
  getInventoryItemsWithInfo,
  getInventoryStats,
  sortInventoryItems,
  filterInventoryItems
} from '../../utils/itemUtils';
import ItemCard from './ItemCard';
import ChestModal from './ChestModal';
import './ShopModal.css';

const ShopModal = ({ isOpen, onClose }) => {
  const { gold, gems, removeGold, addGold, addGems, removeGems, hasEnoughGold, hasEnoughGems } = useCurrency();
  const { addItem, removeItem, getAllItems: getInventoryData, addAllConsumables, addAllMaterials, addAllClothing, addAllPets, addAllChestsAndKeys } = useInventory();
  const { 
    dailyRewards, 
    canClaimToday, 
    getTodayReward, 
    getWeekProgress, 
    getWeekRewards, 
    claimReward 
  } = useDailyRewards();
  
  const [activeTab, setActiveTab] = useState('shop');
  const [activeCategory, setActiveCategory] = useState('all');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—É–Ω–¥—É–∫–∞
  const [chestModal, setChestModal] = useState({
    isOpen: false,
    chestItem: null
  });

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  const allShopItems = getShopItems();
  const itemTypes = getAllTypes();
  const rotationInfo = getRotationInfo();
  const discountItems = getCurrentDiscounts(allShopItems);
  const [currentDiscountIndex, setCurrentDiscountIndex] = useState(0);
  
  // –î–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  const inventoryData = getInventoryData();
  const inventoryItems = getInventoryItemsWithInfo(inventoryData);
  const inventoryStats = getInventoryStats(inventoryItems);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö
  const missingItems = Object.keys(inventoryData).filter(itemId => !getItemById(itemId));
  if (missingItems.length > 0) {
    console.warn('ShopModal - –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö:', missingItems);
  }
  const [inventoryFilter, setInventoryFilter] = useState('all');
  const [inventorySort, setInventorySort] = useState('name');

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const filteredItems = activeCategory === 'all' 
    ? allShopItems 
    : getItemsByType(activeCategory);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
  const switchTab = (tabId) => {
    setActiveTab(tabId);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–∞
  const switchShopCategory = (category) => {
    setActiveCategory(category);
  };

  // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  const buyItem = (itemId, price, currency = 'coins') => {
    console.log('–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:', { itemId, price, currency });
    
    const item = getItemById(itemId);
    const currencySymbol = currency === 'gems' ? 'üíé' : 'ü™ô';
    const currentBalance = currency === 'gems' ? gems : gold;
    
    const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å "${item?.name || itemId}" –∑–∞ ${price} ${currencySymbol}?\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} ${currencySymbol}`;
    
    if (window.confirm(confirmMessage)) {
      if (currency === 'coins') {
        if (hasEnoughGold(price)) {
          removeGold(price);
          addItem(itemId, 1);
          alert(`‚úÖ –í—ã –∫—É–ø–∏–ª–∏ "${item?.name || itemId}" –∑–∞ ${price} –º–æ–Ω–µ—Ç!`);
        } else {
          alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
        }
      } else if (currency === 'gems') {
        if (hasEnoughGems(price)) {
          removeGems(price);
          addItem(itemId, 1);
          alert(`‚úÖ –í—ã –∫—É–ø–∏–ª–∏ "${item?.name || itemId}" –∑–∞ ${price} —Å–∞–º–æ—Ü–≤–µ—Ç–æ–≤!`);
        } else {
          alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∞–º–æ—Ü–≤–µ—Ç–æ–≤!');
        }
      }
    }
  };

  // –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  const sellItem = (itemId, sellPrice) => {
    console.log('–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:', { itemId, sellPrice });
    
    const item = getItemById(itemId);
    const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å "${item?.name || itemId}" –∑–∞ ${sellPrice} ü™ô?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
    
    if (window.confirm(confirmMessage)) {
      removeItem(itemId, 1);
      addGold(sellPrice);
      alert(`‚úÖ –í—ã –ø—Ä–æ–¥–∞–ª–∏ "${item?.name || itemId}" –∑–∞ ${sellPrice} –º–æ–Ω–µ—Ç!`);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—É–Ω–¥—É–∫–æ–≤
  const handleChestClick = (chestItem) => {
    setChestModal({
      isOpen: true,
      chestItem
    });
  };

  const handleChestClose = () => {
    setChestModal({
      isOpen: false,
      chestItem: null
    });
  };

  const handleChestOpen = (itemId, quantity = 1) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    addItem(itemId, quantity);
  };

  const handleChestRemoveItem = (itemId) => {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    removeItem(itemId, 1);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∫–∏–¥–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  React.useEffect(() => {
    if (discountItems.length > 1) {
      const interval = setInterval(() => {
        setCurrentDiscountIndex((prev) => (prev + 1) % discountItems.length);
      }, 3000);
      return () => clearInterval(interval);
    }
  }, [discountItems.length]);

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          key="shop-modal"
          className="shop-modal-overlay"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
        >
          <motion.div
            className="shop-modal-content"
            initial={{ scale: 0.8, opacity: 0, y: 50 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.8, opacity: 0, y: 50 }}
            transition={{ type: "spring", damping: 25, stiffness: 300 }}
            onClick={(e) => e.stopPropagation()}
          >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
            <div className="shop-modal-header">
              <h2 className="shop-modal-title">–ú–∞–≥–∞–∑–∏–Ω</h2>
              <button className="shop-modal-close" onClick={onClose}>
                <i className="fas fa-times"></i>
              </button>
            </div>

            {/* –í–∞–ª—é—Ç–∞ */}
            <div className="shop-modal-currency">
              <div className="currency-item">
                <span className="currency-icon gold-icon"></span>
                <span className="gold-amount">{gold}</span>
              </div>
              <div className="currency-item">
                <span className="currency-icon gem-icon"></span>
                <span className="gem-amount">{gems}</span>
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ—Ç–∞—Ü–∏–∏ */}
            <div className="shop-modal-rotation">
              <span className="rotation-text">
                –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {rotationInfo.daysUntilRotation} –¥–Ω.
              </span>
            </div>

            {/* –í–∫–ª–∞–¥–∫–∏ */}
            <div className="shop-modal-tabs">
              <button 
                className={`tab-btn ${activeTab === 'shop' ? 'active' : ''}`}
                onClick={() => switchTab('shop')}
              >
                <i className="fas fa-shopping-cart"></i>
                –ú–∞–≥–∞–∑–∏–Ω
              </button>
              <button 
                className={`tab-btn ${activeTab === 'inventory' ? 'active' : ''}`}
                onClick={() => switchTab('inventory')}
              >
                <i className="fas fa-backpack"></i>
                –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
              </button>
              <button 
                className={`tab-btn ${activeTab === 'topup' ? 'active' : ''}`}
                onClick={() => switchTab('topup')}
              >
                <i className="fas fa-coins"></i>
                –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
              </button>
            </div>

            {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ */}
            {activeTab === 'shop' && (
              <motion.div 
                className="shop-modal-tab-content"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ */}
                <div className="shop-modal-categories">
                  <button 
                    className={`category-btn ${activeCategory === 'all' ? 'active' : ''}`}
                    onClick={() => switchShopCategory('all')}
                  >
                    –í—Å–µ
                  </button>
                  {itemTypes.map((type) => {
                    const typeInfo = getTypeInfo(type);
                    return (
                      <button 
                        key={type}
                        className={`category-btn ${activeCategory === type ? 'active' : ''}`}
                        onClick={() => switchShopCategory(type)}
                      >
                        {typeInfo.name}
                      </button>
                    );
                  })}
                </div>

                {/* –ö–∞—Ä—É—Å–µ–ª—å —Å–∫–∏–¥–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π */}
                {discountItems.length > 0 && (
                  <div className="shop-modal-discounts">
                    <h3>üî• –°–∫–∏–¥–∫–∏ —Å–µ–≥–æ–¥–Ω—è</h3>
                    <div className="discount-carousel">
                      {discountItems.map((item, index) => (
                        <div
                          key={`discount-${item.id}-${index}`}
                          className={`discount-item ${index === currentDiscountIndex ? 'active' : ''}`}
                        >
                          <ItemCard
                            item={item}
                            onBuy={() => buyItem(
                              item.id, 
                              item.hasDiscount ? item.discountPrice : item.price.amount, 
                              item.price.currency
                            )}
                            onSell={() => sellItem(item.id, item.sellPrice)}
                            showBuyButton={true}
                            showSellButton={false}
                          />
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* –°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
                <div className="shop-modal-items">
                  {filteredItems.map((item) => (
                    <motion.div
                      key={item.id}
                      whileHover={{ y: -5 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <ItemCard
                        item={item}
                        onBuy={() => buyItem(
                          item.id, 
                          item.hasDiscount ? item.discountPrice : item.price.amount, 
                          item.price.currency
                        )}
                        onSell={() => sellItem(item.id, item.sellPrice)}
                        showBuyButton={true}
                        showSellButton={false}
                      />
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            )}

            {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è */}
            {activeTab === 'inventory' && (
              <motion.div 
                className="shop-modal-tab-content"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                <div className="shop-modal-inventory-header">
                  <h3>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</h3>
                  <div className="inventory-stats">
                    –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {inventoryStats.totalItems} | –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {inventoryStats.uniqueItems}
                  </div>
                  <div className="test-buttons-container">
                    <button 
                      className="test-btn consumables-btn"
                      onClick={() => {
                        addAllConsumables();
                        alert('–í—Å–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
                      }}
                    >
                      <i className="fas fa-flask"></i>
                      –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
                    </button>
                    <button 
                      className="test-btn materials-btn"
                      onClick={() => {
                        addAllMaterials();
                        alert('–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
                      }}
                    >
                      <i className="fas fa-hammer"></i>
                      –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                    </button>
                    <button 
                      className="test-btn clothing-btn"
                      onClick={() => {
                        addAllClothing();
                        alert('–í—Å—è –æ–¥–µ–∂–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
                      }}
                    >
                      <i className="fas fa-tshirt"></i>
                      –î–æ–±–∞–≤–∏—Ç—å –æ–¥–µ–∂–¥—É
                    </button>
                    <button 
                      className="test-btn pets-btn"
                      onClick={() => {
                        addAllPets();
                        alert('–í—Å–µ –ø–∏—Ç–æ–º—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
                      }}
                    >
                      <i className="fas fa-paw"></i>
                      –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤
                    </button>
                    <button 
                      className="test-btn chests-btn"
                      onClick={() => {
                        addAllChestsAndKeys();
                        alert('–í—Å–µ —Å—É–Ω–¥—É–∫–∏ –∏ –∫–ª—é—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
                      }}
                    >
                      <i className="fas fa-treasure-chest"></i>
                      –î–æ–±–∞–≤–∏—Ç—å —Å—É–Ω–¥—É–∫–∏
                    </button>
                  </div>
                </div>

                {/* –§–∏–ª—å—Ç—Ä—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è */}
                <div className="shop-modal-inventory-filters">
                  <select 
                    value={inventoryFilter} 
                    onChange={(e) => setInventoryFilter(e.target.value)}
                    className="inventory-filter"
                  >
                    <option value="all">–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã</option>
                    <option value="consumable">–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏</option>
                    <option value="material">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</option>
                    <option value="clothing">–û–¥–µ–∂–¥–∞</option>
                    <option value="pet">–ü–∏—Ç–æ–º—Ü—ã</option>
                    <option value="chest">–°—É–Ω–¥—É–∫–∏</option>
                  </select>
                  
                  <select 
                    value={inventorySort} 
                    onChange={(e) => setInventorySort(e.target.value)}
                    className="inventory-sort"
                  >
                    <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
                    <option value="type">–ü–æ —Ç–∏–ø—É</option>
                    <option value="rarity">–ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏</option>
                    <option value="quantity">–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É</option>
                  </select>
                </div>

                {inventoryItems.length > 0 ? (
                  <div className="shop-modal-items">
                    {sortInventoryItems(
                      filterInventoryItems(inventoryItems, { type: inventoryFilter }),
                      inventorySort
                    ).map((item) => (
                      <motion.div
                        key={item.id}
                        whileHover={{ y: -5 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        <ItemCard
                          item={item}
                          onBuy={() => {}} // –ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
                          onSell={() => sellItem(item.id, item.sellPrice)}
                          onChestClick={handleChestClick}
                          showBuyButton={false}
                          showSellButton={item.canSell}
                          showQuantity={true}
                          quantity={item.quantity}
                        />
                      </motion.div>
                    ))}
                  </div>
                ) : (
                  <div className="shop-modal-empty-inventory">
                    <div className="empty-inventory-icon">
                      <i className="fas fa-box-open"></i>
                    </div>
                    <h3>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</h3>
                    <p>–ö—É–ø–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–¥–µ—Å—å</p>
                  </div>
                )}
              </motion.div>
            )}

            {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è */}
            {activeTab === 'topup' && (
              <motion.div 
                className="shop-modal-tab-content"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                {/* –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã */}
                <div className="shop-modal-topup-section">
                  <h3><i className="fas fa-calendar-check"></i> –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</h3>
                  <div className="daily-rewards-container">
                    <div className="daily-rewards-header">
                      <div className="streak-info">
                        <span className="streak-count">{dailyRewards.currentStreak}</span>
                        <span className="streak-label">–¥–Ω–µ–π –ø–æ–¥—Ä—è–¥</span>
                      </div>
                      <div className="today-reward">
                        <h4>–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</h4>
                        <div className="reward-preview">
                          {(() => {
                            const todayReward = getTodayReward();
                            return (
                              <div className="reward-item-preview">
                                <i className={todayReward.icon}></i>
                                <span>{todayReward.name || `${todayReward.amount} ${todayReward.type === 'coins' ? '–º–æ–Ω–µ—Ç' : todayReward.type === 'gems' ? '—Å–∞–º–æ—Ü–≤–µ—Ç–æ–≤' : ''}`}</span>
                              </div>
                            );
                          })()}
                        </div>
                      </div>
                    </div>
                    
                    <div className="weekly-rewards">
                      <h4>–ù–∞–≥—Ä–∞–¥—ã –Ω–µ–¥–µ–ª–∏</h4>
                      <div className="rewards-grid">
                        {getWeekRewards().map((dayReward) => (
                          <div 
                            key={dayReward.day} 
                            className={`day-reward ${dayReward.isClaimed ? 'claimed' : ''} ${dayReward.isToday ? 'today' : ''}`}
                          >
                            <div className="day-number">{dayReward.day}</div>
                            <div className="reward-icon">
                              <i className={dayReward.reward.icon}></i>
                            </div>
                            <div className="reward-amount">
                              {dayReward.reward.name || `${dayReward.reward.amount} ${dayReward.reward.type === 'coins' ? 'ü™ô' : dayReward.reward.type === 'gems' ? 'üíé' : ''}`}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    <button 
                      className={`claim-reward-btn ${canClaimToday() ? 'available' : 'claimed'}`}
                      onClick={() => {
                        const result = claimReward(addGold, addGems, addItem);
                        if (result.success) {
                          alert(result.message);
                        } else {
                          alert(result.message);
                        }
                      }}
                      disabled={!canClaimToday()}
                    >
                      {canClaimToday() ? (
                        <>
                          <i className="fas fa-gift"></i>
                          –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
                        </>
                      ) : (
                        <>
                          <i className="fas fa-check"></i>
                          –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
                        </>
                      )}
                    </button>
                  </div>
                </div>

                <div className="shop-modal-topup-section">
                  <h3><i className="fas fa-ad"></i> –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É</h3>
                  <div className="ad-reward">
                    <div className="ad-info">
                      <h4>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã</h4>
                      <p>–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: 2 —á–∞—Å–∞ 15 –º–∏–Ω—É—Ç</p>
                    </div>
                    <div className="ad-rewards">
                      <div>50 <span className="currency-icon gold"></span></div>
                      <div>5 <span className="currency-icon gems"></span></div>
                    </div>
                  </div>
                  <button className="watch-ad-btn">
                    <i className="fas fa-play-circle"></i> –°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É (30 —Å–µ–∫)
                  </button>
                </div>

                <div className="shop-modal-topup-section">
                  <h3><i className="fas fa-credit-card"></i> –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</h3>
                  <div className="purchase-packages">
                    {[
                      { gold: 100, bonus: 10, price: '$0.99' },
                      { gold: 500, bonus: 75, price: '$4.99' },
                      { gems: 50, bonus: 5, price: '$2.99' },
                      { gems: 200, bonus: 30, price: '$9.99' }
                    ].map((pkg, index) => (
                      <div key={index} className="package-card">
                        <div className="package-icon">
                          <i className={pkg.gold ? 'fas fa-coins' : 'fas fa-gem'}></i>
                        </div>
                        <h4>{pkg.gold ? `${pkg.gold} –∑–æ–ª–æ—Ç–∞` : `${pkg.gems} —Å–∞–º–æ—Ü–≤–µ—Ç–æ–≤`}</h4>
                        <p>+{pkg.bonus} –±–æ–Ω—É—Å</p>
                        <button className="package-btn">{pkg.price}</button>
                      </div>
                    ))}
                  </div>
                </div>
              </motion.div>
            )}
          </motion.div>
        </motion.div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—É–Ω–¥—É–∫–∞ */}
      <ChestModal
        isOpen={chestModal.isOpen}
        onClose={handleChestClose}
        chestItem={chestModal.chestItem}
        inventoryData={inventoryData}
        onOpenChest={handleChestOpen}
        onRemoveItem={handleChestRemoveItem}
      />
    </AnimatePresence>
  );
};

export default ShopModal;