import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useScreen } from '../../contexts/ScreenContext';
import { useCurrency } from '../../contexts/CurrencyContext';
import { useInventory } from '../../contexts/InventoryContext';
import { useDailyRewards } from '../../contexts/DailyRewardsContext';
import CurrencyDisplay from '../ui/CurrencyDisplay';
import ItemCard from '../ui/ItemCard';
import ChestModal from '../ui/ChestModal';
import { 
  getShopItems, 
  getItemsByType, 
  getAllTypes, 
  getTypeInfo,
  filterItems 
} from '../../utils/itemUtils';
import { getRotationInfo } from '../../utils/shopRotation';
import { getCurrentDiscounts } from '../../utils/discountSystem';
import { getInventoryItemsWithInfo, filterInventoryItems, sortInventoryItems, getInventoryStats } from '../../utils/inventoryUtils';
import { getItemById } from '../../utils/itemUtils';
import './ShopScreen.css';

const ShopScreen = () => {
  const { goBack } = useScreen();
  const { gold, gems, removeGold, addGold, addGems, removeGems, hasEnoughGold, hasEnoughGems } = useCurrency();
  const { addItem, removeItem, getAllItems: getInventoryData, addTestItems } = useInventory();
  const { 
    dailyRewards, 
    canClaimToday, 
    getTodayReward, 
    getWeekProgress, 
    getWeekRewards, 
    claimReward 
  } = useDailyRewards();
  const [activeTab, setActiveTab] = useState('shop');
  const [activeCategory, setActiveCategory] = useState('all');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—É–Ω–¥—É–∫–∞
  const [chestModal, setChestModal] = useState({
    isOpen: false,
    chestItem: null
  });

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  const allShopItems = getShopItems();
  const itemTypes = getAllTypes();
  const rotationInfo = getRotationInfo();
  const discountItems = getCurrentDiscounts(allShopItems);
  console.log('–°–∫–∏–¥–æ—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–∞—Ä—É—Å–µ–ª–∏:', discountItems);
  const [currentDiscountIndex, setCurrentDiscountIndex] = useState(0);
  
  // –î–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  const inventoryData = getInventoryData();
  const inventoryItems = getInventoryItemsWithInfo(inventoryData);
  const inventoryStats = getInventoryStats(inventoryItems);
  const [inventoryFilter, setInventoryFilter] = useState('all');
  const [inventorySort, setInventorySort] = useState('name');

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const filteredItems = activeCategory === 'all' 
    ? allShopItems 
    : getItemsByType(activeCategory);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
  const switchTab = (tabId) => {
    setActiveTab(tabId);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–∞
  const switchShopCategory = (category) => {
    setActiveCategory(category);
  };

  // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  const buyItem = (itemId, price, currency = 'coins') => {
    console.log('–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:', { itemId, price, currency });
    
    const item = getItemById(itemId);
    const currencySymbol = currency === 'gems' ? 'üíé' : 'ü™ô';
    const currentBalance = currency === 'gems' ? gems : gold;
    
    const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å "${item?.name || itemId}" –∑–∞ ${price} ${currencySymbol}?\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} ${currencySymbol}`;
    
    if (window.confirm(confirmMessage)) {
      if (currency === 'coins') {
        if (hasEnoughGold(price)) {
          removeGold(price);
          addItem(itemId, 1);
          alert(`‚úÖ –í—ã –∫—É–ø–∏–ª–∏ "${item?.name || itemId}" –∑–∞ ${price} –º–æ–Ω–µ—Ç!`);
        } else {
          alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
        }
      } else if (currency === 'gems') {
        if (hasEnoughGems(price)) {
          removeGems(price);
          addItem(itemId, 1);
          alert(`‚úÖ –í—ã –∫—É–ø–∏–ª–∏ "${item?.name || itemId}" –∑–∞ ${price} —Å–∞–º–æ—Ü–≤–µ—Ç–æ–≤!`);
        } else {
          alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∞–º–æ—Ü–≤–µ—Ç–æ–≤!');
        }
      }
    }
  };

  // –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  const sellItem = (itemId, sellPrice) => {
    console.log('–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:', { itemId, sellPrice });
    
    const item = getItemById(itemId);
    const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å "${item?.name || itemId}" –∑–∞ ${sellPrice} ü™ô?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
    
    if (window.confirm(confirmMessage)) {
      removeItem(itemId, 1);
      addGold(sellPrice);
      alert(`‚úÖ –í—ã –ø—Ä–æ–¥–∞–ª–∏ "${item?.name || itemId}" –∑–∞ ${sellPrice} –º–æ–Ω–µ—Ç!`);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
  const handleClaimDailyReward = () => {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã');
    const result = claimReward(addGold, addGems, addItem);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:', result);
    
    if (result.success) {
      alert(`üéâ ${result.message}`);
    } else {
      alert(`‚ùå ${result.message}`);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É–Ω–¥—É–∫–∞–º–∏
  const handleChestClick = (chestItem) => {
    console.log('–ö–ª–∏–∫ –ø–æ —Å—É–Ω–¥—É–∫—É:', chestItem);
    setChestModal({
      isOpen: true,
      chestItem: chestItem
    });
  };

  const handleChestClose = () => {
    setChestModal({
      isOpen: false,
      chestItem: null
    });
  };

  const handleChestOpen = (itemId, quantity) => {
    console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ —Å—É–Ω–¥—É–∫–∞:', { itemId, quantity });
    addItem(itemId, quantity);
  };

  const handleChestRemoveItem = (itemId, quantity) => {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞:', { itemId, quantity });
    removeItem(itemId, quantity);
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª—å—é —Å–∫–∏–¥–æ–∫
  const nextDiscount = () => {
    if (discountItems.length > 0) {
      setCurrentDiscountIndex((prev) => (prev + 1) % discountItems.length);
    }
  };

  const prevDiscount = () => {
    if (discountItems.length > 0) {
      setCurrentDiscountIndex((prev) => 
        prev === 0 ? discountItems.length - 1 : prev - 1
      );
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏
  useEffect(() => {
    if (discountItems.length <= 1) return;
    
    const interval = setInterval(() => {
      nextDiscount();
    }, 4000); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã

    return () => clearInterval(interval);
  }, [discountItems.length]);

  return (
    <motion.div 
      className="shop-screen"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <div className="shop-container">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤–∞–ª—é—Ç–∞ */}
        <div className="shop-header">
          <button 
            className="back-button"
            onClick={goBack}
          >
            <i className="fas fa-arrow-left"></i>
          </button>
          <h1 className="shop-title">–ú–∞–≥–∞–∑–∏–Ω</h1>
          <div className="currency-container">
            <div className="currency-item">
              <span className="currency-icon gold-icon"></span>
              <span className="gold-amount">{gold}</span>
            </div>
            <div className="currency-item">
              <span className="currency-icon gem-icon"></span>
              <span className="gem-amount">{gems}</span>
            </div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ—Ç–∞—Ü–∏–∏ */}
        <div className="rotation-info">
          <span className="rotation-text">
            –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {rotationInfo.daysUntilRotation} –¥–Ω.
          </span>
        </div>

        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="tabs-container">
          <button 
            className={`tab-btn ${activeTab === 'shop' ? 'active' : ''}`}
            onClick={() => switchTab('shop')}
          >
            <i className="fas fa-shopping-cart"></i>
            –ú–∞–≥–∞–∑–∏–Ω
          </button>
          <button 
            className={`tab-btn ${activeTab === 'inventory' ? 'active' : ''}`}
            onClick={() => switchTab('inventory')}
          >
            <i className="fas fa-backpack"></i>
            –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
          </button>
          <button 
            className={`tab-btn ${activeTab === 'topup' ? 'active' : ''}`}
            onClick={() => switchTab('topup')}
          >
            <i className="fas fa-coins"></i>
            –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
          </button>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ */}
        {activeTab === 'shop' && (
          <motion.div 
            className="tab-content"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ */}
            <div className="categories-container">
              <button 
                className={`category-btn ${activeCategory === 'all' ? 'active' : ''}`}
                onClick={() => switchShopCategory('all')}
              >
                –í—Å–µ
              </button>
              {itemTypes.map((type) => {
                const typeInfo = getTypeInfo(type);
                return (
                  <button 
                    key={type}
                    className={`category-btn ${activeCategory === type ? 'active' : ''}`}
                    onClick={() => switchShopCategory(type)}
                  >
                    {typeInfo.name}
                  </button>
                );
              })}
            </div>

            {/* –ö–∞—Ä—É—Å–µ–ª—å —Å–∫–∏–¥–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π */}
            {discountItems.length > 0 && (
              <div className="discount-carousel">
                <div className="carousel-container">
                  <button 
                    className="carousel-btn prev"
                    onClick={prevDiscount}
                    disabled={discountItems.length <= 1}
                  >
                    <i className="fas fa-chevron-left"></i>
                  </button>
                  
                  <div className="carousel-content">
                    {discountItems.length > 0 && (
                      <motion.div
                        key={discountItems[currentDiscountIndex]?.id}
                        className="carousel-item active"
                        initial={{ opacity: 0, x: 50 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.3 }}
                        style={{ 
                          display: 'flex',
                          position: 'relative',
                          width: '100%',
                          height: '100%'
                        }}
                      >
                        <div className="discount-badge">-{discountItems[currentDiscountIndex].discountPercent}%</div>
                        <div className="carousel-item-content">
                          <div className="carousel-item-image">
                            <img 
                              src={discountItems[currentDiscountIndex].sprite} 
                              alt={discountItems[currentDiscountIndex].name}
                              onError={(e) => {
                                e.target.style.display = 'none';
                                e.target.nextSibling.style.display = 'flex';
                              }}
                            />
                            <div className="carousel-item-placeholder">
                              
                            </div>
                          </div>
                          <div className="carousel-item-info">
                            <h4>{discountItems[currentDiscountIndex].name}</h4>
                            <p>{discountItems[currentDiscountIndex].description}</p>
                            <div className="carousel-item-price">
                              <span className="original-price">{discountItems[currentDiscountIndex].originalPrice} {discountItems[currentDiscountIndex].currency === 'gems' ? 'üíé' : 'ü™ô'}</span>
                              <span className="discount-price">{discountItems[currentDiscountIndex].discountPrice} {discountItems[currentDiscountIndex].currency === 'gems' ? 'üíé' : 'ü™ô'}</span>
                            </div>
                            <button 
                              className="buy-btn special"
                              onClick={() => {
                                const currentItem = discountItems[currentDiscountIndex];
                                console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–∫—É–ø–∫–∏ –≤ –∫–∞—Ä—É—Å–µ–ª–∏:', {
                                  itemId: currentItem.id,
                                  discountPrice: currentItem.discountPrice,
                                  currency: currentItem.currency,
                                  name: currentItem.name
                                });
                                buyItem(currentItem.id, currentItem.discountPrice, currentItem.currency);
                              }}
                            >
                              –ö—É–ø–∏—Ç—å
                            </button>
                          </div>
                        </div>
                      </motion.div>
                    )}
                  </div>
                  
                  <button 
                    className="carousel-btn next"
                    onClick={nextDiscount}
                    disabled={discountItems.length <= 1}
                  >
                    <i className="fas fa-chevron-right"></i>
                  </button>
                </div>
                
                <div className="carousel-indicators">
                  {discountItems.map((_, index) => (
                    <button
                      key={index}
                      className={`indicator ${index === currentDiscountIndex ? 'active' : ''}`}
                      onClick={() => setCurrentDiscountIndex(index)}
                    />
                  ))}
                </div>
              </div>
            )}

            {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
            <div className="items-grid">
              {filteredItems.map((item) => (
                <motion.div
                  key={item.id}
                  whileHover={{ y: -5 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <ItemCard
                    item={item}
                    onBuy={() => buyItem(
                      item.id, 
                      item.hasDiscount ? item.discountPrice : item.price.amount, 
                      item.price.currency
                    )}
                    onSell={() => sellItem(item.id, item.sellPrice)}
                    showBuyButton={true}
                    showSellButton={false}
                  />
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è */}
        {activeTab === 'inventory' && (
          <motion.div 
            className="tab-content"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >


            {/* –§–∏–ª—å—Ç—Ä—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è */}
            <div className="inventory-filters">
              <select 
                value={inventoryFilter}
                onChange={(e) => setInventoryFilter(e.target.value)}
                className="inventory-filter-select"
              >
                <option value="all">–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã</option>
                <option value="consumable">–†–∞—Å—Ö–æ–¥—É–µ–º—ã–µ</option>
                <option value="material">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</option>
                <option value="key">–ö–ª—é—á–∏</option>
                <option value="pet">–ü–∏—Ç–æ–º—Ü—ã</option>
                <option value="clothing">–û–¥–µ–∂–¥–∞</option>
              </select>
              <select 
                value={inventorySort}
                onChange={(e) => setInventorySort(e.target.value)}
                className="inventory-filter-select"
              >
                <option value="name">–ü–æ –∏–º–µ–Ω–∏</option>
                <option value="quantity">–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É</option>
                <option value="rarity">–ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏</option>
                <option value="type">–ü–æ —Ç–∏–ø—É</option>
                <option value="lastAdded">–ü–æ –¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è</option>
              </select>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ */}
            {inventoryItems.length > 0 ? (
              <div className="items-grid">
                {sortInventoryItems(
                  filterInventoryItems(inventoryItems, { type: inventoryFilter }),
                  inventorySort
                ).map((item) => (
                  <motion.div
                    key={item.id}
                    whileHover={{ y: -5 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <ItemCard
                      item={item}
                      onBuy={() => {}} // –ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
                      onSell={() => sellItem(item.id, item.sellPrice)}
                      onChestClick={handleChestClick}
                      showBuyButton={false}
                      showSellButton={item.canSell}
                      showQuantity={true}
                      quantity={item.quantity}
                    />
                  </motion.div>
                ))}
              </div>
            ) : (
              <div className="empty-inventory">
                <div className="empty-inventory-icon">
                  <i className="fas fa-box-open"></i>
                </div>
                <h3>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</h3>
                <p>–ö—É–ø–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–¥–µ—Å—å</p>
              </div>
            )}
          </motion.div>
        )}

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è */}
        {activeTab === 'topup' && (
          <motion.div 
            className="tab-content"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className="topup-section">
              <h2><i className="fas fa-calendar-day"></i> –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</h2>
              <div className="progress-bar">
                <div className="progress-fill" style={{ width: `${(getWeekProgress() / 7) * 100}%` }}></div>
              </div>
              <div className="daily-rewards">
                {getWeekRewards().map((dayReward) => (
                  <div key={dayReward.day} className={`daily-reward ${dayReward.isClaimed ? 'claimed' : ''} ${dayReward.isToday ? 'today' : ''}`}>
                    <div className={`reward-icon ${dayReward.isClaimed ? 'claimed' : ''} ${dayReward.canClaim ? 'can-claim' : ''}`}>
                      <i className={dayReward.reward.icon}></i>
                    </div>
                    <span>–î–µ–Ω—å {dayReward.day}</span>
                    <div className="reward-amount">
                      {dayReward.reward.type === 'coins' && `${dayReward.reward.amount} ü™ô`}
                      {dayReward.reward.type === 'gems' && `${dayReward.reward.amount} üíé`}
                      {dayReward.reward.type === 'item' && dayReward.reward.name}
                      {dayReward.reward.type === 'random_pet' && '–°–ª—É—á–∞–π–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü'}
                    </div>
                  </div>
                ))}
              </div>
              <button 
                className={`claim-btn ${!canClaimToday() ? 'disabled' : ''}`}
                onClick={handleClaimDailyReward}
                disabled={!canClaimToday()}
              >
                {canClaimToday() ? `–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É (–î–µ–Ω—å ${dailyRewards.currentStreak % 7 + 1})` : '–£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è'}
              </button>
            </div>

            <div className="topup-section">
              <h2><i className="fas fa-ad"></i> –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É</h2>
              <div className="ad-reward">
                <div className="ad-info">
                  <h3>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã</h3>
                  <p>–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: 2 —á–∞—Å–∞ 15 –º–∏–Ω—É—Ç</p>
                </div>
                <div className="ad-rewards">
                  <div>50 <span className="currency-icon gold"></span></div>
                  <div>5 <span className="currency-icon gems"></span></div>
                </div>
              </div>
              <button className="watch-ad-btn">
                <i className="fas fa-play-circle"></i> –°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É (30 —Å–µ–∫)
              </button>
            </div>

            <div className="topup-section">
              <h2><i className="fas fa-credit-card"></i> –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</h2>
              <div className="purchase-packages">
                {[
                  { gold: 100, bonus: 10, price: '$0.99' },
                  { gold: 500, bonus: 75, price: '$4.99' },
                  { gems: 50, bonus: 5, price: '$2.99' },
                  { gems: 200, bonus: 30, price: '$9.99' }
                ].map((pkg, index) => (
                  <div key={index} className="package-card">
                    <div className="package-icon">
                      <i className={pkg.gold ? 'fas fa-coins' : 'fas fa-gem'}></i>
                    </div>
                    <h3>{pkg.gold ? `${pkg.gold} –∑–æ–ª–æ—Ç–∞` : `${pkg.gems} —Å–∞–º–æ—Ü–≤–µ—Ç–æ–≤`}</h3>
                    <p>+{pkg.bonus} –±–æ–Ω—É—Å</p>
                    <button className="package-btn">{pkg.price}</button>
                  </div>
                ))}
              </div>
            </div>
          </motion.div>
        )}


      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—É–Ω–¥—É–∫–∞ */}
      <ChestModal
        isOpen={chestModal.isOpen}
        onClose={handleChestClose}
        chestItem={chestModal.chestItem}
        inventoryData={inventoryData}
        onOpenChest={handleChestOpen}
        onRemoveItem={handleChestRemoveItem}
      />
    </motion.div>
  );
};

export default ShopScreen; 