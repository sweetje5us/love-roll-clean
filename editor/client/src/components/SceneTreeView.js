import React, { useState, useEffect, useRef } from 'react';

const API_BASE_URL = 'http://localhost:3001/api';

const SceneTreeView = ({ selectedEpisode, selectedChapter, onSceneEdit, onSceneCreate }) => {
  const [scenes, setScenes] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [treeData, setTreeData] = useState({ nodes: [], connections: [] });
  const treeContainerRef = useRef(null);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω
  const loadScenesForTree = async () => {
    if (!selectedEpisode || !selectedChapter) {
      setScenes([]);
      setTreeData({ nodes: [], connections: [] });
      return;
    }

    setIsLoading(true);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—ã —á–µ—Ä–µ–∑ API
      console.log(`SceneTreeView: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—ã –¥–ª—è —ç–ø–∏–∑–æ–¥–∞: ${selectedEpisode.id}, –≥–ª–∞–≤—ã: ${selectedChapter.id}`);
      const response = await fetch(`${API_BASE_URL}/episodes/${selectedEpisode.id}/chapters/${selectedChapter.id}/scenes`);
      if (response.ok) {
        const scenesData = await response.json();
        console.log(`SceneTreeView: –ü–æ–ª—É—á–µ–Ω–æ —Å—Ü–µ–Ω: ${scenesData.length}`);
        console.log('SceneTreeView: –ü–µ—Ä–≤—ã–µ 5 —Å—Ü–µ–Ω:', scenesData.slice(0, 5).map(s => s.id));
        setScenes(scenesData);
        
        // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ —Å–≤—è–∑–µ–π
        const tree = buildSceneTree(scenesData);
        setTreeData(tree);
      } else {
        console.error('SceneTreeView: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω');
        setScenes([]);
        setTreeData({ nodes: [], connections: [] });
      }
    } catch (error) {
      console.error('SceneTreeView: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω –¥–ª—è –¥–µ—Ä–µ–≤–∞:', error);
      setScenes([]);
      setTreeData({ nodes: [], connections: [] });
    } finally {
      setIsLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–ø–∏–∑–æ–¥–∞ –∏–ª–∏ –≥–ª–∞–≤—ã
  useEffect(() => {
    loadScenesForTree();
  }, [selectedEpisode, selectedChapter]);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Å—Ü–µ–Ω
  useEffect(() => {
    const handleRefreshSceneTree = () => {
      console.log('SceneTreeView: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Å—Ü–µ–Ω');
      loadScenesForTree();
    };

    window.addEventListener('refreshSceneTree', handleRefreshSceneTree);
    
    return () => {
      window.removeEventListener('refreshSceneTree', handleRefreshSceneTree);
    };
  }, [selectedEpisode, selectedChapter]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Å—Ü–µ–Ω
  const buildSceneTree = (scenesData) => {
    const sceneMap = new Map();
    const connections = [];
    const existingSceneIds = new Set(scenesData.map(scene => scene.id));
    const missingScenes = new Set();
    
    // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ü–µ–Ω
    scenesData.forEach((scene) => {
      sceneMap.set(scene.id, {
        id: scene.id,
        name: scene.name || scene.id,
        x: 0,
        y: 0,
        level: 0,
        choices: scene.choices || [],
        exists: true
      });
    });

    // –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ü–µ–Ω—ã
    scenesData.forEach(scene => {
      if (scene.choices) {
        scene.choices.forEach(choice => {
          // –û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
          if (choice.nextScene) {
            if (existingSceneIds.has(choice.nextScene)) {
              connections.push({
                from: scene.id,
                to: choice.nextScene,
                text: choice.text || '–í—ã–±–æ—Ä',
                isMissing: false
              });
            } else {
              missingScenes.add(choice.nextScene);
              connections.push({
                from: scene.id,
                to: choice.nextScene,
                text: choice.text || '–í—ã–±–æ—Ä',
                isMissing: true
              });
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ö–æ–¥–∞–º–∏
          if (choice.diceCheck && choice.diceCheck.results) {
            const results = choice.diceCheck.results;
            const statName = choice.diceCheck.stat;
            
            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö
            if (results.critical_success) {
              if (existingSceneIds.has(results.critical_success)) {
                connections.push({
                  from: scene.id,
                  to: results.critical_success,
                  text: `üéØ ${choice.text} (–ö—Ä–∏—Ç. —É—Å–ø–µ—Ö)`,
                  isMissing: false
                });
              } else {
                missingScenes.add(results.critical_success);
                connections.push({
                  from: scene.id,
                  to: results.critical_success,
                  text: `üéØ ${choice.text} (–ö—Ä–∏—Ç. —É—Å–ø–µ—Ö)`,
                  isMissing: true
                });
              }
            }
            
            // –£—Å–ø–µ—Ö
            if (results.success) {
              if (existingSceneIds.has(results.success)) {
                connections.push({
                  from: scene.id,
                  to: results.success,
                  text: `‚úÖ ${choice.text} (–£—Å–ø–µ—Ö)`,
                  isMissing: false
                });
              } else {
                missingScenes.add(results.success);
                connections.push({
                  from: scene.id,
                  to: results.success,
                  text: `‚úÖ ${choice.text} (–£—Å–ø–µ—Ö)`,
                  isMissing: true
                });
              }
            }
            
            // –ü—Ä–æ–≤–∞–ª
            if (results.failure) {
              if (existingSceneIds.has(results.failure)) {
                connections.push({
                  from: scene.id,
                  to: results.failure,
                  text: `‚ùå ${choice.text} (–ü—Ä–æ–≤–∞–ª)`,
                  isMissing: false
                });
              } else {
                missingScenes.add(results.failure);
                connections.push({
                  from: scene.id,
                  to: results.failure,
                  text: `‚ùå ${choice.text} (–ü—Ä–æ–≤–∞–ª)`,
                  isMissing: true
                });
              }
            }
            
            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª
            if (results.critical_failure) {
              if (existingSceneIds.has(results.critical_failure)) {
                connections.push({
                  from: scene.id,
                  to: results.critical_failure,
                  text: `üí• ${choice.text} (–ö—Ä–∏—Ç. –ø—Ä–æ–≤–∞–ª)`,
                  isMissing: false
                });
              } else {
                missingScenes.add(results.critical_failure);
                connections.push({
                  from: scene.id,
                  to: results.critical_failure,
                  text: `üí• ${choice.text} (–ö—Ä–∏—Ç. –ø—Ä–æ–≤–∞–ª)`,
                  isMissing: true
                });
              }
            }
          }
        });
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ü–µ–Ω
    missingScenes.forEach(sceneId => {
      sceneMap.set(sceneId, {
        id: sceneId,
        name: sceneId,
        x: 0,
        y: 0,
        level: 0,
        choices: [],
        exists: false
      });
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ (BFS)
    const visited = new Set();
    const queue = [{ id: scenesData[0]?.id, level: 0 }];
    
    while (queue.length > 0) {
      const { id, level } = queue.shift();
      if (visited.has(id)) continue;
      
      visited.add(id);
      const node = sceneMap.get(id);
      if (node) {
        node.level = level;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É–∑–ª—ã –≤ –æ—á–µ—Ä–µ–¥—å
        connections.forEach(conn => {
          if (conn.from === id && !visited.has(conn.to)) {
            queue.push({ id: conn.to, level: level + 1 });
          }
        });
      }
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–∑–ª—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
    const levels = new Map();
    sceneMap.forEach(node => {
      if (!levels.has(node.level)) {
        levels.set(node.level, []);
      }
      levels.get(node.level).push(node);
    });

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —É–∑–ª—ã
    const levelSpacing = 200;
    const nodeSpacing = 150;
    
    levels.forEach((nodes, level) => {
      const levelY = level * levelSpacing + 50;
      const totalWidth = (nodes.length - 1) * nodeSpacing;
      const startX = 50;
      
      nodes.forEach((node, index) => {
        node.x = startX + index * nodeSpacing;
        node.y = levelY;
      });
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è SVG
    const nodes = Array.from(sceneMap.values());
    let maxX = 0, maxY = 0;
    
    nodes.forEach(node => {
      maxX = Math.max(maxX, node.x + 120); // 120px - —à–∏—Ä–∏–Ω–∞ —É–∑–ª–∞
      maxY = Math.max(maxY, node.y + 80);  // 80px - –≤—ã—Å–æ—Ç–∞ —É–∑–ª–∞
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
    const svgWidth = Math.max(maxX + 50, 800);
    const svgHeight = Math.max(maxY + 50, 400);
    
    return {
      nodes: nodes,
      connections: connections,
      svgWidth: svgWidth,
      svgHeight: svgHeight
    };
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É–∑–ª—É
  const handleNodeClick = (node) => {
    console.log('–ö–ª–∏–∫ –ø–æ —É–∑–ª—É:', node);
    console.log('–£–∑–µ–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', node.exists);
    console.log('onSceneEdit:', onSceneEdit);
    console.log('onSceneCreate:', onSceneCreate);
    
    if (node.exists) {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ü–µ–Ω—ã
      console.log('–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã:', node.id);
      if (onSceneEdit) {
        const existingScene = scenes.find(scene => scene.id === node.id);
        console.log('–ù–∞–π–¥–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞:', existingScene);
        if (existingScene) {
          console.log('–í—ã–∑—ã–≤–∞–µ–º onSceneEdit —Å —Å—Ü–µ–Ω–æ–π:', existingScene);
          onSceneEdit(existingScene);
        }
      }
    } else {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ü–µ–Ω—ã —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º ID
      console.log('–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã —Å ID:', node.id);
      if (onSceneCreate) {
        console.log('–í—ã–∑—ã–≤–∞–µ–º onSceneCreate —Å ID:', node.id);
        onSceneCreate(node.id);
      }
    }
  };

  if (!selectedEpisode) {
    return (
      <div className="scene-tree-view">
        <div className="no-selection">
          <h2>–î—Ä–µ–≤–æ —Å—Ü–µ–Ω</h2>
          <p>–í—ã–±–µ—Ä–∏—Ç–µ —ç–ø–∏–∑–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Å—Ü–µ–Ω</p>
        </div>
      </div>
    );
  }

  if (!selectedChapter) {
    return (
      <div className="scene-tree-view">
        <div className="no-selection">
          <h2>–î—Ä–µ–≤–æ —Å—Ü–µ–Ω</h2>
          <p>–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Å—Ü–µ–Ω</p>
        </div>
      </div>
    );
  }

  return (
    <div className="scene-tree-view">
      <div className="manager-header">
        <div className="header-info">
          <h2>–î—Ä–µ–≤–æ —Å—Ü–µ–Ω</h2>
          <p className="episode-info">–≠–ø–∏–∑–æ–¥: {selectedEpisode.name}</p>
          <p className="chapter-info">–ì–ª–∞–≤–∞: {selectedChapter.name}</p>
        </div>
        <div className="tree-legend">
          <div className="legend-item">
            <div className="legend-node existing"></div>
            <span>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ü–µ–Ω—ã</span>
          </div>
          <div className="legend-item">
            <div className="legend-node missing"></div>
            <span>–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ü–µ–Ω—ã</span>
          </div>
        </div>
      </div>

      {isLoading ? (
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞ —Å—Ü–µ–Ω...</p>
        </div>
      ) : (
        <div className="scene-tree-container" ref={treeContainerRef}>
          {!treeData || !treeData.nodes || treeData.nodes.length === 0 ? (
            <div className="empty-state">
              <p>–°—Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p>–°–æ–∑–¥–∞–π—Ç–µ —Å—Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Å–≤—è–∑–µ–π</p>
            </div>
          ) : (
            <div className="tree-svg-container">
              <svg 
                className="tree-svg" 
                width={treeData.svgWidth || 800} 
                height={treeData.svgHeight || 400}
                viewBox={`0 0 ${treeData.svgWidth || 800} ${treeData.svgHeight || 400}`}
              >
                {/* –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–≤—è–∑–µ–π */}
                {treeData.connections.map((connection, index) => {
                  const fromNode = treeData.nodes.find(n => n.id === connection.from);
                  const toNode = treeData.nodes.find(n => n.id === connection.to);
                  
                  if (fromNode && toNode) {
                    const fromX = fromNode.x + 60; // —Ü–µ–Ω—Ç—Ä —É–∑–ª–∞
                    const fromY = fromNode.y + 40;
                    const toX = toNode.x + 60;
                    const toY = toNode.y + 40;
                    
                    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–≥–Ω—É—Ç—É—é –ª–∏–Ω–∏—é
                    const midX = (fromX + toX) / 2;
                    const midY = (fromY + toY) / 2;
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Å—Ç–∏–ª—å —Å–≤—è–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    const isDiceCheck = connection.text.includes('üéØ') || connection.text.includes('‚úÖ') || 
                                      connection.text.includes('‚ùå') || connection.text.includes('üí•');
                    const isMissing = connection.isMissing;
                    
                    let strokeColor, strokeWidth, markerId;
                    if (isMissing) {
                      strokeColor = '#ef4444'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ü–µ–Ω
                      strokeWidth = '3';
                      markerId = 'arrowhead-missing';
                    } else if (isDiceCheck) {
                      strokeColor = '#2196F3';
                      strokeWidth = '3';
                      markerId = 'arrowhead-dice';
                    } else {
                      strokeColor = '#4CAF50';
                      strokeWidth = '2';
                      markerId = 'arrowhead-normal';
                    }
                    
                    return (
                      <g key={`connection-${index}`}>
                        <path
                          d={`M ${fromX} ${fromY} Q ${midX} ${midY} ${toX} ${toY}`}
                          stroke={strokeColor}
                          strokeWidth={strokeWidth}
                          fill="none"
                          markerEnd={`url(#${markerId})`}
                        />
                        <text
                          x={midX}
                          y={midY - 15}
                          textAnchor="middle"
                          fill="white"
                          fontSize="10"
                          className="connection-label"
                        >
                          {connection.text.length > 15 ? connection.text.substring(0, 15) + '...' : connection.text}
                        </text>
                      </g>
                    );
                  }
                  return null;
                })}
                
                {/* –°—Ç—Ä–µ–ª–∫–∏ –¥–ª—è —Å–≤—è–∑–µ–π */}
                <defs>
                  <marker
                    id="arrowhead-normal"
                    markerWidth="10"
                    markerHeight="7"
                    refX="9"
                    refY="3.5"
                    orient="auto"
                  >
                    <polygon points="0 0, 10 3.5, 0 7" fill="#4CAF50" />
                  </marker>
                  <marker
                    id="arrowhead-dice"
                    markerWidth="10"
                    markerHeight="7"
                    refX="9"
                    refY="3.5"
                    orient="auto"
                  >
                    <polygon points="0 0, 10 3.5, 0 7" fill="#2196F3" />
                  </marker>
                  <marker
                    id="arrowhead-missing"
                    markerWidth="10"
                    markerHeight="7"
                    refX="9"
                    refY="3.5"
                    orient="auto"
                  >
                    <polygon points="0 0, 10 3.5, 0 7" fill="#ef4444" />
                  </marker>
                </defs>
              </svg>
              
              {/* –£–∑–ª—ã –¥–µ—Ä–µ–≤–∞ */}
              <div className="tree-nodes">
                {treeData.nodes && treeData.nodes.map((node) => (
                  <div
                    key={node.id}
                    className={`tree-node ${node.exists ? 'existing' : 'missing'}`}
                    style={{
                      left: `${node.x}px`,
                      top: `${node.y}px`
                    }}
                    onClick={() => handleNodeClick(node)}
                    title={node.exists ? `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—É: ${node.id}` : `–°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω—É: ${node.id}`}
                  >
                    <div className="node-content">
                      <div className="node-id">{node.id}</div>
                      <div className="node-name">{node.name}</div>
                      {node.exists && node.choices.length > 0 && (
                        <div className="node-choices">
                          {node.choices.length} –≤—ã–±–æ—Ä–æ–≤
                          {node.choices.some(choice => choice.diceCheck) && (
                            <span className="node-dice-check">üé≤</span>
                          )}
                        </div>
                      )}
                      {!node.exists && (
                        <div className="node-missing">
                          <span className="missing-icon">‚ö†Ô∏è</span>
                          –ù–µ —Å–æ–∑–¥–∞–Ω–∞
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SceneTreeView; 