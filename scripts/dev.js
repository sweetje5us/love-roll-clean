const { spawn } = require('child_process');
const http = require('http');

console.log('üöÄ –ó–∞–ø—É—Å–∫ Love & Roll –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
function checkServer(url) {
  return new Promise((resolve) => {
    const req = http.get(url, (res) => {
      if (res.statusCode === 200) {
        resolve(true);
      } else {
        resolve(false);
      }
    });
    
    req.on('error', () => {
      resolve(false);
    });
    
    req.setTimeout(2000, () => {
      req.destroy();
      resolve(false);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
async function waitForServer(url, maxAttempts = 30) {
  for (let i = 0; i < maxAttempts; i++) {
    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞... (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxAttempts})`);
    const isReady = await checkServer(url);
    if (isReady) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤!');
      return true;
    }
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  return false;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  // –ó–∞–ø—É—Å–∫–∞–µ–º React —Å–µ—Ä–≤–µ—Ä
  console.log('üì¶ –ó–∞–ø—É—Å–∫ React —Å–µ—Ä–≤–µ—Ä–∞...');
  const reactProcess = spawn('npm', ['start'], {
    stdio: 'pipe',
    shell: true,
    cwd: process.cwd()
  });

  // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ React —Å–µ—Ä–≤–µ—Ä–∞
  reactProcess.stdout.on('data', (data) => {
    const output = data.toString();
    if (output.includes('Local:')) {
      console.log('üåê React —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000');
    }
  });

  reactProcess.stderr.on('data', (data) => {
    console.error('‚ùå React –æ—à–∏–±–∫–∞:', data.toString());
  });

  // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  const serverReady = await waitForServer('http://localhost:3000');
  
  if (!serverReady) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä');
    reactProcess.kill();
    process.exit(1);
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º Electron
  console.log('‚ö° –ó–∞–ø—É—Å–∫ Electron...');
  const electronProcess = spawn('npx', ['electron', '.'], {
    stdio: 'inherit',
    shell: true,
    cwd: process.cwd()
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  electronProcess.on('close', (code) => {
    console.log(`üîö Electron –∑–∞–∫—Ä—ã—Ç —Å –∫–æ–¥–æ–º ${code}`);
    reactProcess.kill();
    process.exit(0);
  });

  reactProcess.on('close', (code) => {
    console.log(`üîö React —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç —Å –∫–æ–¥–æ–º ${code}`);
    electronProcess.kill();
    process.exit(0);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–∫—Ä—ã—Ç–∏–µ...');
    reactProcess.kill();
    electronProcess.kill();
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–∫—Ä—ã—Ç–∏–µ...');
    reactProcess.kill();
    electronProcess.kill();
    process.exit(0);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch((error) => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 